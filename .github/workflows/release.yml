name: Release and Deploy

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  validate-release:
    name: Validate release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest build twine

    - name: Run full test suite
      run: |
        python run_tests.py

    - name: Validate version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.event.release.tag_name }}"
        fi
        
        echo "Validating version: $VERSION"
        
        # Check version format
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Invalid version format. Expected: vX.Y.Z"
          exit 1
        fi
        
        echo "✅ Version format is valid"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Check changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          if grep -q "$VERSION" CHANGELOG.md; then
            echo "✅ Version $VERSION found in CHANGELOG.md"
          else
            echo "⚠️ Version $VERSION not found in CHANGELOG.md"
          fi
        else
          echo "⚠️ CHANGELOG.md not found"
        fi

  build-package:
    name: Build Python package
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip build twine

    - name: Update version in setup.py
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.event.release.tag_name }}"
        fi
        
        # Remove 'v' prefix for Python version
        PYTHON_VERSION=${VERSION#v}
        
        # Update version in setup.py
        sed -i "s/version=['\"][^'\"]*['\"]/version='$PYTHON_VERSION'/" setup.py
        
        echo "Updated setup.py with version: $PYTHON_VERSION"

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        python -m twine check dist/*

    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  build-docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM python:3.10-slim
        
        # Set working directory
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            && rm -rf /var/lib/apt/lists/*
        
        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copy application code
        COPY . .
        
        # Create data directories
        RUN mkdir -p data/raw data/processed data/outputs
        
        # Set environment variables
        ENV PYTHONPATH=/app
        ENV NEURONMAP_DATA_DIR=/app/data
        
        # Expose port for web interface (if applicable)
        EXPOSE 8050
        
        # Default command
        CMD ["python", "main.py", "--help"]
        EOF

    - name: Build Docker image
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.event.release.tag_name }}"
        fi
        
        docker build -t neuronmap:$VERSION -t neuronmap:latest .

    - name: Test Docker image
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.event.release.tag_name }}"
        fi
        
        # Test that the image runs
        docker run --rm neuronmap:$VERSION python main.py --help
        
        # Test that required directories exist
        docker run --rm neuronmap:$VERSION ls -la data/

    - name: Save Docker image
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.event.release.tag_name }}"
        fi
        
        docker save neuronmap:$VERSION | gzip > neuronmap-$VERSION.tar.gz

    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: neuronmap-*.tar.gz

  generate-docs:
    name: Generate documentation
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx sphinx-rtd-theme myst-parser
        pip install -r requirements.txt

    - name: Generate API documentation
      run: |
        mkdir -p docs/api
        
        # Generate module documentation
        python -c "
        import os
        import ast
        import importlib.util
        
        def extract_docstring(filepath):
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    tree = ast.parse(f.read())
                return ast.get_docstring(tree) or 'No module docstring available.'
            except:
                return 'Error reading module docstring.'
        
        def generate_module_docs():
            modules = []
            for root, dirs, files in os.walk('src'):
                for file in files:
                    if file.endswith('.py') and file != '__init__.py':
                        filepath = os.path.join(root, file)
                        rel_path = os.path.relpath(filepath, 'src')
                        module_name = rel_path.replace('/', '.').replace('.py', '')
                        docstring = extract_docstring(filepath)
                        modules.append((module_name, docstring, filepath))
            
            with open('docs/api/modules.md', 'w') as f:
                f.write('# API Reference\n\n')
                f.write('## Modules\n\n')
                
                for module_name, docstring, filepath in sorted(modules):
                    f.write(f'### {module_name}\n\n')
                    f.write(f'**File:** `{filepath}`\n\n')
                    f.write(f'{docstring}\n\n')
                    f.write('---\n\n')
            
            print(f'Generated documentation for {len(modules)} modules')
        
        generate_module_docs()
        "

    - name: Create user guide
      run: |
        cat > docs/user-guide.md << 'EOF'
        # NeuronMap User Guide
        
        ## Overview
        
        NeuronMap is a comprehensive tool for analyzing neuron activations in neural networks.
        
        ## Quick Start
        
        ### Installation
        
        ```bash
        pip install -r requirements.txt
        ```
        
        ### Basic Usage
        
        1. **Generate Questions**:
           ```bash
           python main.py generate --num-questions 50 --output questions.json
           ```
        
        2. **Extract Activations**:
           ```bash
           python main.py extract --model gpt2 --questions questions.json --output activations.h5
           ```
        
        3. **Analyze Activations**:
           ```bash
           python main.py analyze --input activations.h5 --output analysis.json
           ```
        
        4. **Visualize Results**:
           ```bash
           python main.py visualize --input analysis.json --output plots/
           ```
        
        ## Advanced Features
        
        ### Interpretability Analysis
        ```bash
        python main.py interpret --model gpt2 --layer transformer.h.6 --method cav
        ```
        
        ### Experimental Analysis
        ```bash
        python main.py experiment --input activations.h5 --methods rsa cka probing
        ```
        
        ## Configuration
        
        Configuration files are located in the `configs/` directory:
        - `models.yaml`: Model definitions and layer mappings
        - `experiments.yaml`: Experiment configurations
        
        ## Docker Usage
        
        ```bash
        docker run -v $(pwd)/data:/app/data neuronmap:latest python main.py --help
        ```
        
        EOF

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/

  publish-package:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-package]
    if: github.event_name == 'release'
    environment: pypi
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true

  create-release-assets:
    name: Create release assets
    runs-on: ubuntu-latest
    needs: [build-package, build-docker, generate-docs]
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release archive
      run: |
        VERSION="${{ github.event.release.tag_name }}"
        
        # Create release directory
        mkdir -p neuronmap-$VERSION
        
        # Copy package files
        cp python-package/* neuronmap-$VERSION/ || true
        
        # Copy documentation
        cp -r documentation neuronmap-$VERSION/docs || true
        
        # Create archive
        tar -czf neuronmap-$VERSION.tar.gz neuronmap-$VERSION/
        zip -r neuronmap-$VERSION.zip neuronmap-$VERSION/

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./neuronmap-${{ github.event.release.tag_name }}.tar.gz
        asset_name: neuronmap-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload ZIP release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./neuronmap-${{ github.event.release.tag_name }}.zip
        asset_name: neuronmap-${{ github.event.release.tag_name }}.zip
        asset_content_type: application/zip

  deploy-docs:
    name: Deploy documentation
    runs-on: ubuntu-latest
    needs: [generate-docs]
    if: github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download documentation
      uses: actions/download-artifact@v4
      with:
        name: documentation
        path: docs/

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        commit_message: 'Deploy documentation for ${{ github.event.release.tag_name }}'

  notify-completion:
    name: Notify completion
    runs-on: ubuntu-latest
    needs: [publish-package, create-release-assets, deploy-docs]
    if: always() && github.event_name == 'release'
    
    steps:
    - name: Create completion summary
      run: |
        echo "## 🚀 Release ${{ github.event.release.tag_name }} Completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.publish-package.result }}" == "success" ]; then
          echo "✅ **Package Published**: Available on PyPI" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Package Publishing**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.create-release-assets.result }}" == "success" ]; then
          echo "✅ **Release Assets**: Created and uploaded" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Release Assets**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy-docs.result }}" == "success" ]; then
          echo "✅ **Documentation**: Deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Documentation Deployment**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 What's Next:" >> $GITHUB_STEP_SUMMARY
        echo "- Check PyPI for package availability" >> $GITHUB_STEP_SUMMARY
        echo "- Verify documentation is accessible" >> $GITHUB_STEP_SUMMARY
        echo "- Update any dependent projects" >> $GITHUB_STEP_SUMMARY
        echo "- Announce the release to users" >> $GITHUB_STEP_SUMMARY