name: PR Quick Checks

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  quick-test:
    name: Quick validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=__pycache__,.git,.tox,dist,docs,*.egg

    - name: Check code formatting
      run: |
        black --check --diff . || (echo "Code formatting issues found. Run 'black .' to fix." && exit 1)

    - name: Check import sorting
      run: |
        isort --check-only --diff . || (echo "Import sorting issues found. Run 'isort .' to fix." && exit 1)

    - name: Run core tests
      run: |
        # Run a subset of tests for quick feedback
        python -m pytest tests/test_core.py tests/test_config.py -v --tb=short
      continue-on-error: true

    - name: Validate project structure
      run: |
        python -c "
        import os
        import sys
        
        # Check for required files
        required_files = ['README.md', 'requirements.txt', 'setup.py', 'main.py']
        missing_files = [f for f in required_files if not os.path.exists(f)]
        
        if missing_files:
            print(f'‚ùå Missing required files: {missing_files}')
            sys.exit(1)
        else:
            print('‚úÖ All required files present')
        
        # Check src structure
        if not os.path.exists('src'):
            print('‚ùå src directory missing')
            sys.exit(1)
        
        required_src_dirs = ['analysis', 'data_generation', 'visualization', 'utils']
        missing_dirs = [d for d in required_src_dirs if not os.path.exists(f'src/{d}')]
        
        if missing_dirs:
            print(f'‚ùå Missing src subdirectories: {missing_dirs}')
            sys.exit(1)
        else:
            print('‚úÖ All required src subdirectories present')
        
        print('‚úÖ Project structure validation passed')
        "

    - name: Check for secrets or sensitive data
      run: |
        # Basic check for common sensitive patterns
        if grep -r -i "password\|secret\|key\|token" --include="*.py" . | grep -v "__pycache__" | grep -v ".git"; then
          echo "‚ö†Ô∏è Potential sensitive data found in code"
          echo "Please review the above matches and ensure no real secrets are committed"
        else
          echo "‚úÖ No obvious sensitive data patterns found"
        fi

  changes-analysis:
    name: Analyze changes
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Analyze changed files
      run: |
        # Get list of changed files
        git diff --name-only origin/main...HEAD > changed_files.txt
        
        echo "üìä Changed files in this PR:"
        cat changed_files.txt
        
        # Categorize changes
        python_files=$(grep "\.py$" changed_files.txt | wc -l)
        test_files=$(grep "test_" changed_files.txt | wc -l)
        config_files=$(grep -E "\.(yaml|yml|json|toml)$" changed_files.txt | wc -l)
        doc_files=$(grep -E "\.(md|rst|txt)$" changed_files.txt | wc -l)
        
        echo ""
        echo "üìà Change summary:"
        echo "  Python files: $python_files"
        echo "  Test files: $test_files"
        echo "  Config files: $config_files"
        echo "  Documentation files: $doc_files"
        
        # Check if tests were added for new features
        if [ $python_files -gt 0 ] && [ $test_files -eq 0 ]; then
          echo "‚ö†Ô∏è Python code changed but no test files modified"
          echo "Consider adding tests for new functionality"
        fi
        
        # Check for large files
        large_files=$(git diff --name-only origin/main...HEAD | xargs ls -la | awk '$5 > 1048576 {print $9, $5}')
        if [ -n "$large_files" ]; then
          echo "‚ö†Ô∏è Large files detected:"
          echo "$large_files"
        fi

    - name: Code complexity analysis
      run: |
        pip install radon
        
        echo "üìä Code complexity analysis:"
        
        # Calculate cyclomatic complexity
        if [ -d "src" ]; then
          echo "Cyclomatic Complexity:"
          radon cc src/ -s || echo "No complexity issues found"
          
          echo ""
          echo "Maintainability Index:"
          radon mi src/ -s || echo "No maintainability issues found"
        fi

  security-check:
    name: Security analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-results.json || true
        
        if [ -f bandit-results.json ]; then
          # Check if any high or medium severity issues found
          high_issues=$(python -c "
          import json
          try:
              with open('bandit-results.json') as f:
                  data = json.load(f)
                  high = len([r for r in data.get('results', []) if r.get('issue_severity') == 'HIGH'])
                  medium = len([r for r in data.get('results', []) if r.get('issue_severity') == 'MEDIUM'])
                  print(f'{high},{medium}')
          except:
              print('0,0')
          ")
          
          high_count=$(echo $high_issues | cut -d',' -f1)
          medium_count=$(echo $high_issues | cut -d',' -f2)
          
          echo "üîí Security scan results:"
          echo "  High severity issues: $high_count"
          echo "  Medium severity issues: $medium_count"
          
          if [ $high_count -gt 0 ]; then
            echo "‚ùå High severity security issues found"
            exit 1
          elif [ $medium_count -gt 0 ]; then
            echo "‚ö†Ô∏è Medium severity security issues found - please review"
          else
            echo "‚úÖ No high/medium severity security issues found"
          fi
        fi

    - name: Check dependencies for vulnerabilities
      run: |
        if [ -f requirements.txt ]; then
          safety check -r requirements.txt || echo "Vulnerability check completed with warnings"
        else
          echo "No requirements.txt found, skipping dependency vulnerability check"
        fi

  performance-preview:
    name: Performance preview
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install numpy psutil
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Quick performance test
      run: |
        python -c "
        import time
        import numpy as np
        import psutil
        
        print('üöÄ Quick performance preview:')
        
        # Memory test
        process = psutil.Process()
        initial_memory = process.memory_info().rss / 1024 / 1024
        
        # Simulate typical operations
        start_time = time.time()
        data = np.random.randn(1000, 768)
        mean_data = np.mean(data, axis=1)
        std_data = np.std(data, axis=1)
        correlation = np.corrcoef(data[:100])  # Small sample
        end_time = time.time()
        
        final_memory = process.memory_info().rss / 1024 / 1024
        
        print(f'  Computation time: {end_time - start_time:.4f}s')
        print(f'  Memory usage: {initial_memory:.1f} MB ‚Üí {final_memory:.1f} MB')
        print(f'  Memory increase: {final_memory - initial_memory:.1f} MB')
        print(f'  Data shape processed: {data.shape}')
        
        # Simple performance assertions
        assert end_time - start_time < 5.0, 'Performance regression: computation too slow'
        assert final_memory - initial_memory < 100, 'Memory usage too high'
        
        print('‚úÖ Performance preview passed')
        "

  summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [quick-test, changes-analysis, security-check, performance-preview]
    if: always()
    
    steps:
    - name: Generate PR summary
      run: |
        echo "## üìã PR Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check job statuses
        if [ "${{ needs.quick-test.result }}" == "success" ]; then
          echo "‚úÖ **Quick Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Quick Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-check.result }}" == "success" ]; then
          echo "‚úÖ **Security Check**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Security Check**: Failed or has warnings" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.performance-preview.result }}" == "success" ]; then
          echo "‚úÖ **Performance Preview**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Performance Preview**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Review any failing checks above" >> $GITHUB_STEP_SUMMARY
        echo "- Ensure all tests pass before merging" >> $GITHUB_STEP_SUMMARY
        echo "- Consider running the full CI pipeline for comprehensive testing" >> $GITHUB_STEP_SUMMARY