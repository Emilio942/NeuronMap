#!/bin/bash

# NeuronMap Phase 2 Enhancement Demo
# This script demonstrates the new features implemented in Phase 2

echo "🎯 NeuronMap Phase 2 Enhancement Demo"
echo "======================================"

echo ""
echo "📊 1. Data Processing and Quality Management"
echo "-------------------------------------------"

echo "# Process a questions file with quality validation"
echo "python main.py process --input-file data/raw/questions.jsonl \\"
echo "                       --output-file data/processed/validated_questions.h5 \\"
echo "                       --validate --async-mode --chunk-size 500 \\"
echo "                       --experiment-name 'quality_demo'"

echo ""
echo "# Validate data quality and detect duplicates"
echo "python main.py validate-data --input-file data/raw/questions.jsonl \\"
echo "                            --duplicate-threshold 0.85"

echo ""
echo "# Manage experiment metadata"
echo "python main.py metadata --action list-experiments"
echo "python main.py metadata --action create-version \\"
echo "                        --dataset-name 'demo_questions' \\"
echo "                        --file-path data/raw/questions.jsonl \\"
echo "                        --description 'Demo dataset for Phase 2'"

echo ""
echo "🎨 2. Interactive Visualizations"
echo "--------------------------------"

echo "# Create comprehensive interactive dashboard"
echo "python main.py interactive --input-file data/outputs/activations.h5 \\"
echo "                          --dashboard \\"
echo "                          --output-dir data/outputs/interactive_dashboard"

echo ""
echo "# Create specific interactive visualizations"
echo "python main.py interactive --input-file data/outputs/activations.h5 \\"
echo "                          --types heatmap dimensionality distribution \\"
echo "                          --layer 'transformer.layers.0' \\"
echo "                          --dim-method umap --show-clusters"

echo ""
echo "# Create animated layer progression"
echo "python main.py interactive --input-file data/outputs/activations.h5 \\"
echo "                          --types animation \\"
echo "                          --output-dir data/outputs/animations"

echo ""
echo "⚡ 3. Enhanced Multi-Model Extraction with Performance Optimization"
echo "===================================================================="

echo "# Extract activations from multiple layers with optimized processing"
echo "python main.py multi-extract --model llama2-7b \\"
echo "                            --questions-file data/processed/validated_questions.h5 \\"
echo "                            --layer-range 0 10 \\"
echo "                            --batch-size 8 \\"
echo "                            --output-format hdf5"

echo ""
echo "📈 4. Complete Pipeline with All New Features"
echo "=============================================="

echo "# Run full pipeline with quality management and interactive visualization"
echo "python main.py pipeline --config enhanced_demo \\"
echo "                        --experimental-features \\"
echo "                        --quality-validation \\"
echo "                        --interactive-dashboard"

echo ""
echo "🔍 5. Analysis with Advanced Features"
echo "====================================="

echo "# Perform advanced analysis on processed activations"
echo "python main.py analyze --input-file data/outputs/activations.h5 \\"
echo "                       --output data/outputs/advanced_analysis \\"
echo "                       --compare-layers transformer.layers.0 transformer.layers.5 transformer.layers.11"

echo ""
echo "# Analyze attention patterns"
echo "python main.py attention --input data/outputs/activations.h5 \\"
echo "                         --output data/outputs/attention_analysis \\"
echo "                         --layer transformer.layers.8"

echo ""
echo "📊 6. Monitoring and Health Checks"
echo "==================================="

echo "# Monitor system performance during processing"
echo "python main.py monitor --interval 30 --duration 300 \\"
echo "                       --output data/outputs/performance_metrics.json"

echo ""
echo "# Validate system setup with new features"
echo "python main.py validate --check-interactive --check-processing --check-gpu"

echo ""
echo "📁 7. New File Structure Overview"
echo "=================================="

echo "NeuronMap/"
echo "├── src/"
echo "│   ├── data_processing/          # 🆕 Data quality and streaming"
echo "│   │   ├── quality_manager.py"
echo "│   │   ├── streaming_processor.py"
echo "│   │   └── metadata_manager.py"
echo "│   ├── visualization/"
echo "│   │   ├── interactive_visualizer.py  # 🆕 Enhanced with dashboard"
echo "│   │   └── visualizer.py"
echo "│   ├── analysis/                 # Enhanced multi-model support"
echo "│   │   ├── multi_model_extractor.py"
echo "│   │   ├── advanced_analysis.py"
echo "│   │   └── attention_analysis.py"
echo "│   └── utils/"
echo "│       └── performance.py       # 🆕 Enhanced optimization"
echo "├── data/"
echo "│   ├── metadata/                # 🆕 Experiment tracking"
echo "│   ├── processed/               # 🆕 Quality-validated data"
echo "│   └── outputs/"
echo "│       ├── interactive_dashboard/  # 🆕 Interactive visualizations"
echo "│       └── advanced_analysis/      # 🆕 Enhanced analysis results"
echo "└── PHASE2_ENHANCEMENTS.md      # 🆕 Comprehensive documentation"

echo ""
echo "✅ Key Achievements in Phase 2:"
echo "==============================="
echo "• ✅ Interactive visualization system with Plotly dashboards"
echo "• ✅ Data quality management and validation framework"
echo "• ✅ Streaming data processing with async support"
echo "• ✅ Experiment tracking and metadata management"
echo "• ✅ Performance optimization and memory management"
echo "• ✅ Enhanced CLI with 20+ new commands and options"
echo "• ✅ Comprehensive error handling and monitoring"
echo "• ✅ HDF5-based efficient data storage"
echo "• ✅ Multi-threaded and async processing pipelines"
echo "• ✅ Duplicate detection and data validation"

echo ""
echo "🎯 Ready for Phase 3:"
echo "===================="
echo "• Advanced interpretability features (CAVs, saliency maps)"
echo "• Multi-GPU and distributed computing support"
echo "• Real-time processing and live visualization"
echo "• Advanced analytics (probing tasks, RSA, CKA)"
echo "• Production deployment features"

echo ""
echo "🚀 To get started, run:"
echo "python main.py --help"
echo "python main.py interactive --help"
echo "python main.py process --help"
